package com.hs.alice.auth.domain;

// Generated 2013. 4. 16 오후 4:38:05 by Hibernate Tools 3.4.0.CR1

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.TableGenerator;
import javax.persistence.Transient;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.hs.alice.core.AliceCore;

/**
 * AuthGroup generated by hbm2java
 */
@Entity
@Table(name = "AUTH_GROUP", schema = "ALICE")
//@org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.READ_WRITE)
public class AuthGroup implements java.io.Serializable {

	private static final long serialVersionUID = AliceCore.SERIAL_VERSION_UID;

	private static final Log logger = LogFactory.getLog(AuthGroup.class);

	private Integer groupid;
	private String groupname;
	private Integer parentid;
	private Character enabled;
	private Set<AuthRoleGroupMap> authRoleGroupMaps = new HashSet<AuthRoleGroupMap>(0);
	private Set<AuthUser> authUsers = new HashSet<AuthUser>(0);

	public AuthGroup() {
	}

	public AuthGroup(Integer groupid, String groupname) {
		this.groupid = groupid;
		this.groupname = groupname;
	}

	public AuthGroup(Integer groupid, String groupname, Integer parentid,
			Character enabled, Set<AuthRoleGroupMap> authRoleGroupMaps,
			Set<AuthUser> authUsers) {
		this.groupid = groupid;
		this.groupname = groupname;
		this.parentid = parentid;
		this.enabled = enabled;
		this.authRoleGroupMaps = authRoleGroupMaps;
		this.authUsers = authUsers;
	}
	
	@Transient
	public Integer[] getRoles() {
		logger.debug(this);
		if(this.authRoleGroupMaps != null) {
			Integer[] roles = new Integer[this.authRoleGroupMaps.size()];
			int i=0;
			for(AuthRoleGroupMap authRoleGroupMap : this.authRoleGroupMaps) {
				roles[i++] = authRoleGroupMap.getAuthRole().getRoleid();
				authRoleGroupMap.getAuthRole().getRolename();
			}
			logger.debug(Arrays.toString(roles));
			return roles;
		}
		else {
			logger.debug("authRoleGroupMaps null");
			return new Integer[0];
		}
	}
	public void setRoles(Integer[] roles) {
		logger.debug(Arrays.toString(roles));
		Set<AuthRoleGroupMap> rebuildAuthRoleGroupMaps = new HashSet<AuthRoleGroupMap>();
		for(Integer roleid : roles) {
			boolean notfound = true;
			// 기존에 가지고 있는지 찾아, 다시 넣어준다.
			for(AuthRoleGroupMap authRoleGroupMap : this.authRoleGroupMaps) {
				Integer rid = authRoleGroupMap.getAuthRole().getRoleid();
				if(rid.equals(roleid)) {
					rebuildAuthRoleGroupMaps.add(authRoleGroupMap);
					notfound = false;
					break;
				}
			}
			// 기존에 없는 것이면, 새로 만들어 넣어준다.
			if(notfound) {
				AuthRole authRole = new AuthRole();
				authRole.setRoleid(roleid);
				AuthRoleGroupMap authRoleGroupMap = new AuthRoleGroupMap();
				authRoleGroupMap.setAuthGroup(this);
				authRoleGroupMap.setAuthRole(authRole);
				
				rebuildAuthRoleGroupMaps.add(authRoleGroupMap);
			}
		}
		this.setAuthRoleGroupMaps(rebuildAuthRoleGroupMaps);
//		this.roles = roles;
	}
	
	
	@Id
	@TableGenerator(name="TABLE_GEN", table="ALICE_ID", pkColumnName="ID_NAME", 
		valueColumnName="ID_COUNT", pkColumnValue="AUTH_GROUP", allocationSize=1)
	@GeneratedValue(strategy=GenerationType.TABLE, generator="TABLE_GEN")
	@Column(name = "GROUPID", unique = true, nullable = false, precision = 22, scale = 0)
	public Integer getGroupid() {
		return this.groupid;
	}

	public void setGroupid(Integer groupid) {
		this.groupid = groupid;
	}

	@Column(name = "GROUPNAME", nullable = false, length = 100)
	public String getGroupname() {
		return this.groupname;
	}

	public void setGroupname(String groupname) {
		this.groupname = groupname;
	}

	@Column(name = "PARENTID", precision = 22, scale = 0)
	public Integer getParentid() {
		return this.parentid;
	}

	public void setParentid(Integer parentid) {
		this.parentid = parentid;
	}

	@Column(name = "ENABLED", length = 1)
	public Character getEnabled() {
		return this.enabled;
	}

	public void setEnabled(Character enabled) {
		this.enabled = enabled;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "authGroup", cascade = CascadeType.ALL, orphanRemoval=true)
	public Set<AuthRoleGroupMap> getAuthRoleGroupMaps() {
		return this.authRoleGroupMaps;
	}

	public void setAuthRoleGroupMaps(Set<AuthRoleGroupMap> authRoleGroupMaps) {
		this.authRoleGroupMaps = authRoleGroupMaps;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "authGroup")
	public Set<AuthUser> getAuthUsers() {
		return this.authUsers;
	}

	public void setAuthUsers(Set<AuthUser> authUsers) {
		this.authUsers = authUsers;
	}

	@Override
	public String toString() {
		return "AuthGroup [id=" + groupid + ", name=" + groupname
				+ ", pid=" + parentid + ", enabled=" + enabled + "]";
	}

	public AuthGroup fetch() {
		this.getAuthRoleGroupMaps();
		this.getAuthUsers();
		this.getEnabled();
		this.getGroupid();
		this.getGroupname();
		this.getParentid();
		this.getRoles();
		
		return this;
	}
	
}
