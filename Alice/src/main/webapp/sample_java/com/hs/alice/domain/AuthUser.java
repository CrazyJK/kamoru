package com.hs.alice.domain;

// Generated 2013. 4. 10 오전 10:19:22 by Hibernate Tools 3.4.0.CR1

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.hs.alice.core.AliceCore;

/**
 * AuthUser generated by hbm2java
 */
public class AuthUser implements UserDetails {

	private static final long serialVersionUID = AliceCore.SERIAL_VERSION_UID;

    private static final Log logger = LogFactory.getLog(AuthUser.class);

	private BigDecimal userid;
	private AuthGroup authGroup;
	private String username;
	private String password;
	private String refkey;
	private Character accountexpired;
	private Character accountlocked;
	private Character passwordexpired;
	private Date passwordexpireddate;
	private BigDecimal passwordfailcount;
	private Date accountexpireddate;
	private Set<AuthRoleUserMap> authRoleUserMaps = new HashSet<AuthRoleUserMap>(0);

	private List<GrantedAuthority> authorities = new ArrayList<GrantedAuthority>();
		
//	private Map<BigDecimal, AuthRole> roleMap = new HashMap<BigDecimal, AuthRole>();
	
	private String[] roles;
	
	public AuthUser() {
	}

	public AuthUser(BigDecimal userid, String username, String password) {
		this.userid = userid;
		this.username = username;
		this.password = password;
	}

	public AuthUser(BigDecimal userid, AuthGroup authGroup, String username,
			String password, String refkey, Character accountexpired,
			Character accountlocked, Character passwordexpired,
			Date passwordexpireddate, BigDecimal passwordfailcount,
			Date accountexpireddate, Set<AuthRoleUserMap> authRoleUserMaps) {
		this.userid = userid;
		this.authGroup = authGroup;
		this.username = username;
		this.password = password;
		this.refkey = refkey;
		this.accountexpired = accountexpired;
		this.accountlocked = accountlocked;
		this.passwordexpired = passwordexpired;
		this.passwordexpireddate = passwordexpireddate;
		this.passwordfailcount = passwordfailcount;
		this.accountexpireddate = accountexpireddate;
		this.authRoleUserMaps = authRoleUserMaps;
	}

	public BigDecimal getUserid() {
		return this.userid;
	}

	public void setUserid(BigDecimal userid) {
		this.userid = userid;
	}

	public AuthGroup getAuthGroup() {
		return this.authGroup;
	}

	public void setAuthGroup(AuthGroup authGroup) {
		this.authGroup = authGroup;
	}

	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return this.password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public String getRefkey() {
		return this.refkey;
	}

	public void setRefkey(String refkey) {
		this.refkey = refkey;
	}

	public Character getAccountexpired() {
		return this.accountexpired;
	}

	public void setAccountexpired(Character accountexpired) {
		this.accountexpired = accountexpired;
	}

	public Character getAccountlocked() {
		return this.accountlocked;
	}

	public void setAccountlocked(Character accountlocked) {
		this.accountlocked = accountlocked;
	}

	public Character getPasswordexpired() {
		return this.passwordexpired;
	}

	public void setPasswordexpired(Character passwordexpired) {
		this.passwordexpired = passwordexpired;
	}

	public Date getPasswordexpireddate() {
		return this.passwordexpireddate;
	}

	public void setPasswordexpireddate(Date passwordexpireddate) {
		this.passwordexpireddate = passwordexpireddate;
	}

	public BigDecimal getPasswordfailcount() {
		return this.passwordfailcount;
	}

	public void setPasswordfailcount(BigDecimal passwordfailcount) {
		this.passwordfailcount = passwordfailcount;
	}

	public Date getAccountexpireddate() {
		return this.accountexpireddate;
	}

	public void setAccountexpireddate(Date accountexpireddate) {
		this.accountexpireddate = accountexpireddate;
	}

	public Set<AuthRoleUserMap> getAuthRoleUserMaps() {
		return this.authRoleUserMaps;
	}

	public void setAuthRoleUserMaps(Set<AuthRoleUserMap> authRoleUserMaps) {
		this.authRoleUserMaps = authRoleUserMaps;
	}

	public String[] getRoles() {
		if(roles == null) {
			roles = new String[this.authRoleUserMaps.size()];
			int i = 0;
			for(AuthRoleUserMap authRoleUserMap : authRoleUserMaps) {
				roles[i++] = authRoleUserMap.getAuthRole().getRoleid().toString();
			}
		}
		return roles;
	}

	public void setRoles(String[] roles) {
		this.roles = roles;
	}

	public void addAuthority(AuthRole authRole) {
		authorities.add(new SimpleGrantedAuthority(authRole.getRolename()));
	}
	
	public void fillAuthorities() {
		this.authorities.clear();
		for(AuthRoleUserMap authRoleUserMap : this.authRoleUserMaps) {
			this.addAuthority(authRoleUserMap.getAuthRole());
		}
		if(this.authGroup != null) {
			Set<AuthRoleGroupMap> authRoleGroupMaps = this.authGroup.getAuthRoleGroupMaps();
			if(authRoleGroupMaps != null) {
				for(AuthRoleGroupMap authRoleGroupMap : authRoleGroupMaps) {
					this.addAuthority(authRoleGroupMap.getAuthRole());
				}
			}
		}
	}

	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		if(this.authorities.size() == 0) {
			try {
				this.fillAuthorities();
			} 
			catch(Exception e) {
				logger.equals(e);
			}
		}
		return authorities;
	}

	@Override
	public boolean isAccountNonExpired() {
		return this.accountexpired != 'T';
	}

	@Override
	public boolean isAccountNonLocked() {
		return this.accountlocked != 'T';
	}

	@Override
	public boolean isCredentialsNonExpired() {
		return this.passwordexpired != 'T';
	}

	@Override
	public boolean isEnabled() {
		return this.isAccountNonExpired() && this.isAccountNonLocked();
	}

	@Override
	public String toString() {
		return "AuthUser [userid=" + userid + ", authGroup=" + authGroup.getGroupid()
				+ ", username=" + username + ", password=" + password
				+ ", refkey=" + refkey + ", accountexpired=" + accountexpired
				+ ", accountlocked=" + accountlocked + ", passwordexpired="
				+ passwordexpired + ", passwordexpireddate="
				+ passwordexpireddate + ", passwordfailcount="
				+ passwordfailcount + ", accountexpireddate="
				+ accountexpireddate + ", authRoleUserMaps=" + authRoleUserMaps
				+ ", authorities=" + authorities + ", roles="
				+ Arrays.toString(roles) + "]";
	}

	
}
