package com.hs.alice.auth.domain;

// Generated 2013. 4. 16 오후 4:38:05 by Hibernate Tools 3.4.0.CR1

import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.TableGenerator;

import com.hs.alice.core.AliceCore;

/**
 * AuthRole generated by hbm2java
 */
@Entity
@Table(name = "AUTH_ROLE", schema = "ALICE")
//@org.hibernate.annotations.Cache(usage = org.hibernate.annotations.CacheConcurrencyStrategy.READ_WRITE)
public class AuthRole implements java.io.Serializable {

	private static final long serialVersionUID = AliceCore.SERIAL_VERSION_UID;

	private Integer roleid;
	private String rolename;
	private char enabled;
	private Set<AuthRoleUserMap> authRoleUserMaps = new HashSet<AuthRoleUserMap>(0);
	private Set<AuthRoleGroupMap> authRoleGroupMaps = new HashSet<AuthRoleGroupMap>(0);

	public AuthRole() {
	}

	public AuthRole(Integer roleid, String rolename, char enabled) {
		this.roleid = roleid;
		this.rolename = rolename;
		this.enabled = enabled;
	}

	public AuthRole(Integer roleid, String rolename, char enabled,
			Set<AuthRoleUserMap> authRoleUserMaps,
			Set<AuthRoleGroupMap> authRoleGroupMaps) {
		this.roleid = roleid;
		this.rolename = rolename;
		this.enabled = enabled;
		this.authRoleUserMaps = authRoleUserMaps;
		this.authRoleGroupMaps = authRoleGroupMaps;
	}

	@Id
	@TableGenerator(name="TABLE_GEN", table="ALICE_ID", pkColumnName="ID_NAME", 
		valueColumnName="ID_COUNT", pkColumnValue="AUTH_ROLE", allocationSize=1)
	@GeneratedValue(strategy=GenerationType.TABLE, generator="TABLE_GEN")
	@Column(name = "ROLEID", unique = true, nullable = false, precision = 22, scale = 0)
	public Integer getRoleid() {
		return this.roleid;
	}

	public void setRoleid(Integer roleid) {
		this.roleid = roleid;
	}

	@Column(name = "ROLENAME", nullable = false, length = 100)
	public String getRolename() {
		return this.rolename;
	}

	public void setRolename(String rolename) {
		this.rolename = rolename;
	}

	@Column(name = "ENABLED", nullable = false, length = 1)
	public char getEnabled() {
		return this.enabled;
	}

	public void setEnabled(char enabled) {
		this.enabled = enabled;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "authRole")
	public Set<AuthRoleUserMap> getAuthRoleUserMaps() {
		return this.authRoleUserMaps;
	}

	public void setAuthRoleUserMaps(Set<AuthRoleUserMap> authRoleUserMaps) {
		this.authRoleUserMaps = authRoleUserMaps;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "authRole")
	public Set<AuthRoleGroupMap> getAuthRoleGroupMaps() {
		return this.authRoleGroupMaps;
	}

	public void setAuthRoleGroupMaps(Set<AuthRoleGroupMap> authRoleGroupMaps) {
		this.authRoleGroupMaps = authRoleGroupMaps;
	}

	@Override
	public String toString() {
		return "AuthRole [id=" + roleid + ", name=" + rolename
				+ ", enabled=" + enabled + "]";
	}

	public AuthRole fetch() {
		this.fetchAuthRoleUserMaps();
		this.fetchAuthRoleGroupMaps();
		this.getEnabled();
		this.getRoleid();
		this.getRolename();
		
		return this;
	}
	/**
	 * JOIN FETCH로도 가져올수 없는 AuthUser를 미리 호출하여 초기화 한다.<br>
	 * 좀 더 좋은 방법이 있을텐디... 찾아야 함!
	 */
	public void fetchAuthRoleUserMaps() {
		for(AuthRoleUserMap user : this.authRoleUserMaps) {
			user.getAuthUser().fetch();
		}
	}
	
	/**
	 * JOIN FETCH로도 가져올수 없는 AuthGroup를 미리 호출하여 초기화 한다.<br>
	 * 좀 더 좋은 방법이 있을텐디... 찾아야 함!
	 */
	public void fetchAuthRoleGroupMaps() {
		for(AuthRoleGroupMap group : this.authRoleGroupMaps) {
			group.getAuthGroup().fetch();
		}
	}

}
